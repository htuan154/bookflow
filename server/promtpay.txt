B·∫°n l√† tr·ª£ l√Ω d·ªØ li·ªáu cho h·ªá th·ªëng ƒë·∫∑t ph√≤ng kh√°ch s·∫°n BOOKFLOW.
H·ªá th·ªëng hi·ªán t·∫°i bao g·ªìm:
- **Backend API** (Node.js + PostgreSQL) - ‚úÖ HO√ÄN TH√ÄNH
- **Frontend Web Admin & Hotel Owner** (React.js) - ‚úÖ HO√ÄN TH√ÄNH  
- **Mobile App cho Kh√°ch h√†ng** (Flutter) - üöß ƒêANG PH√ÅT TRI·ªÇN

=== PH·∫¶N 1: B√ÅO C√ÅO ADMIN (HI·ªÜN T·∫†I) ===
H√£y t·ªïng h·ª£p **B√ÅO C√ÅO ADMIN** theo ƒë√∫ng quy t·∫Øc, d√πng 2 b·∫£ng:
- payments(payment_id, booking_id, hotel_id, gross_amount, pg_fee_amount, admin_fee_amount, hotel_net_amount, status, tx_ref, paid_at, note, created_at)
- payouts(payout_id, hotel_id, cover_date, scheduled_at, total_net_amount, status, note, created_at)

QUY T·∫ÆC NGHI·ªÜP V·ª§:
1) QR l√† c·ªßa Admin, m·ªçi kho·∫£n kh√°ch tr·∫£ ƒë·ªÅu v√†o t√†i kho·∫£n Admin (ghi ·ªü payments).
2) Ch·ªâ t√≠nh giao d·ªãch payments c√≥ status = "paid" **v√†** paid_at kh√¥ng r·ªóng.
3) Ng√†y nghi·ªáp v·ª• (biz_date) = (paid_at theo timezone "Asia/Ho_Chi_Minh") l·∫•y ph·∫ßn DATE.
4) Payout ch·∫°y 07:00 m·ªói s√°ng cho NG√ÄY H√îM TR∆Ø·ªöC (cover_date = h√¥m tr∆∞·ªõc trong timezone tr√™n).
5) Refund/failed/pending KH√îNG t√≠nh v√†o t·ªïng doanh thu ng√†y.

ƒê·∫¶U V√ÄO:
- date_from, date_to: {{DATE_FROM}} ‚Üí {{DATE_TO}} (YYYY-MM-DD, inclusive, theo Asia/Ho_Chi_Minh).
- hotel_filter: {{HOTEL_ID_LIST ho·∫∑c "ALL"}}.
- (tu·ª≥ ch·ªçn) hotel_mapping: danh s√°ch {hotel_id ‚Üí hotel_name, city}. N·∫øu kh√¥ng c√≥ th√¨ ch·ªâ d√πng hotel_id.

Y√äU C·∫¶U X·ª¨ L√ù:
A) T·ªîNG H·ª¢P THEO NG√ÄY √ó KH√ÅCH S·∫†N (daily_summary)
   - Ch·ªâ l·∫•y payments th·ªèa: status='paid', paid_at NOT NULL, biz_date ‚àà [date_from..date_to], v√† (hotel ‚àà filter n·∫øu c√≥).
   - bookings_count = COUNT(*)
   - gross_sum      = SUM(gross_amount)
   - pg_fee_sum     = SUM(pg_fee_amount)
   - admin_fee_sum  = SUM(admin_fee_amount)
   - hotel_net_sum  = SUM(hotel_net_amount)
   - N·∫øu c√≥ hotel_mapping, b·ªï sung hotel_name, city; n·∫øu kh√¥ng, b·ªè qua.

B) ƒê·ªÄ XU·∫§T PAYOUT 07:00 (payout_proposals)
   - V·ªõi m·ªói (biz_date, hotel_id) trong A c√≥ hotel_net_sum > 0:
     + cover_date = biz_date
     + total_net_amount = hotel_net_sum
     + exists_in_payouts = true n·∫øu ƒë√£ c√≥ b·∫£n ghi trong payouts v·ªõi (hotel_id, cover_date) tr√πng; ng∆∞·ª£c l·∫°i false.

C) DANH S√ÅCH GIAO D·ªäCH (payments_detail)
   - Li·ªát k√™ c√°c payments ƒë√£ l·ªçc ·ªü A, m·ªói item g·ªìm:
     + payment_id, booking_id, hotel_id
     + gross_amount, admin_fee_amount, hotel_net_amount
     + tx_ref (c√≥ th·ªÉ null)
     + paid_at (ISO8601)
     + biz_date (YYYY-MM-DD)
   - S·∫Øp x·∫øp gi·∫£m d·∫ßn theo paid_at.

R√ÄNG BU·ªòC & FORMAT:
- T√≠nh biz_date = (paid_at AT TIME ZONE 'Asia/Ho_Chi_Minh')::DATE.
- Ph·∫°m vi ng√†y bao g·ªìm c·∫£ date_from v√† date_to (inclusive).
- B·ªè qua m·ªçi payments kh√¥ng ph·∫£i 'paid' ho·∫∑c thi·∫øu paid_at.
- Ti·ªÅn l√† s·ªë th·∫≠p ph√¢n; kh√¥ng l√†m tr√≤n c·ª©ng. N·∫øu hi·ªÉn th·ªã, l√†m tr√≤n 0 ƒë·ªìng.
- Cho ph√©p hotel_filter="ALL" (kh√¥ng l·ªçc).

ƒê·∫¶U RA JSON (ƒë√∫ng schema, kh√¥ng k√®m thuy·∫øt minh):
{
  "meta": {
    "timezone": "Asia/Ho_Chi_Minh",
    "date_from": "{{DATE_FROM}}",
    "date_to": "{{DATE_TO}}",
    "filtered_hotels": {{array hotel_id ho·∫∑c "ALL"}}
  },
  "daily_summary": [
    {
      "biz_date": "YYYY-MM-DD",
      "hotel_id": "UUID",
      "hotel_name": "string|optional",
      "city": "string|optional",
      "bookings_count": number,
      "gross_sum": number,
      "pg_fee_sum": number,
      "admin_fee_sum": number,
      "hotel_net_sum": number
    }
  ],
  "payout_proposals": [
    {
      "cover_date": "YYYY-MM-DD",
      "hotel_id": "UUID",
      "total_net_amount": number,
      "exists_in_payouts": boolean
    }
  ],
  "payments_detail": [
    {
      "payment_id": "UUID",
      "booking_id": "UUID",
      "hotel_id": "UUID",
      "gross_amount": number,
      "admin_fee_amount": number,
      "hotel_net_amount": number,
      "tx_ref": "string|null",
      "paid_at": "ISO8601",
      "biz_date": "YYYY-MM-DD"
    }
  ]
}

N·∫æU KH√îNG C√ì D·ªÆ LI·ªÜU:
- Tr·∫£ v·ªÅ JSON h·ª£p l·ªá v·ªõi c√°c m·∫£ng r·ªóng.

=== PH·∫¶N 2: H∆Ø·ªöNG PH√ÅT TRI·ªÇN MOBILE PAYMENT ===

üéØ **M·ª§C TI√äU**: Ph√°t tri·ªÉn Mobile App (Flutter) cho kh√°ch h√†ng ƒë·∫∑t ph√≤ng v√† thanh to√°n

üì± **KI·∫æN TR√öC MOBILE PAYMENT**:

A) **MOBILE APP FEATURES**:
   - üè® T√¨m ki·∫øm & ƒë·∫∑t ph√≤ng kh√°ch s·∫°n
   - üí≥ Thanh to√°n tr·ª±c tuy·∫øn (VNPay, MoMo, ZaloPay)
   - üì± Qu√©t QR code thanh to√°n t·∫°i kh√°ch s·∫°n
   - üé´ Qu·∫£n l√Ω booking & check-in/out
   - üìä L·ªãch s·ª≠ giao d·ªãch c√° nh√¢n
   - üîî Push notification cho booking status

B) **PAYMENT FLOW MOBILE**:
   ```
   1. Customer ƒë·∫∑t ph√≤ng qua Mobile App
   2. Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n:
      - Online: VNPay/MoMo/ZaloPay ‚Üí API
      - Offline: QR Code t·∫°i kh√°ch s·∫°n
   3. Backend t·∫°o payment record (status="pending")
   4. Payment gateway x·ª≠ l√Ω ‚Üí webhook callback
   5. Update payment status ‚Üí Push notification
   6. Hotel Owner nh·∫≠n th√¥ng b√°o ƒë·∫∑t ph√≤ng m·ªõi
   ```

C) **DATABASE EXTENSIONS** (C·∫ßn th√™m):
   ```sql
   -- B·∫£ng thi·∫øt b·ªã mobile & push notifications
   CREATE TABLE mobile_devices (
     device_id UUID PRIMARY KEY,
     user_id UUID REFERENCES users(user_id),
     device_token VARCHAR(500), -- FCM token
     platform ENUM('ios', 'android'),
     app_version VARCHAR(20),
     created_at TIMESTAMP DEFAULT NOW(),
     last_active TIMESTAMP
   );

   -- B·∫£ng QR codes cho thanh to√°n offline
   CREATE TABLE payment_qr_codes (
     qr_id UUID PRIMARY KEY,
     booking_id UUID REFERENCES bookings(booking_id),
     qr_data TEXT, -- JSON ch·ª©a th√¥ng tin thanh to√°n
     expires_at TIMESTAMP,
     status ENUM('active', 'used', 'expired'),
     created_at TIMESTAMP DEFAULT NOW()
   );

   -- L·ªãch s·ª≠ push notifications
   CREATE TABLE push_notifications (
     notification_id UUID PRIMARY KEY,
     user_id UUID REFERENCES users(user_id),
     title VARCHAR(200),
     body TEXT,
     data JSON, -- Custom payload
     sent_at TIMESTAMP DEFAULT NOW(),
     read_at TIMESTAMP
   );
   ```

D) **API ENDPOINTS C·∫¶N TH√äM**:
   ```
   // Mobile Authentication
   POST /api/v1/mobile/auth/login
   POST /api/v1/mobile/auth/register
   POST /api/v1/mobile/auth/refresh-token

   // Mobile Bookings
   GET  /api/v1/mobile/hotels/search
   POST /api/v1/mobile/bookings
   GET  /api/v1/mobile/bookings/my-bookings
   
   // Mobile Payments
   POST /api/v1/mobile/payments/create-payment
   POST /api/v1/mobile/payments/qr-generate
   POST /api/v1/mobile/payments/qr-verify
   GET  /api/v1/mobile/payments/history

   // Push Notifications
   POST /api/v1/mobile/notifications/register-device
   GET  /api/v1/mobile/notifications/list
   PUT  /api/v1/mobile/notifications/:id/mark-read
   ```

E) **MOBILE PAYMENT METHODS**:
   ```javascript
   const PAYMENT_METHODS = {
     VNPAY: {
       name: "VNPay",
       type: "online",
       logo: "vnpay_logo.png",
       supported_banks: ["VCB", "TCB", "MB", "ACB"]
     },
     MOMO: {
       name: "MoMo eWallet", 
       type: "online",
       logo: "momo_logo.png"
     },
     ZALOPAY: {
       name: "ZaloPay",
       type: "online", 
       logo: "zalopay_logo.png"
     },
     QR_CODE: {
       name: "QR Code t·∫°i kh√°ch s·∫°n",
       type: "offline",
       description: "Qu√©t m√£ QR ƒë·ªÉ thanh to√°n t·∫°i l·ªÖ t√¢n"
     }
   };
   ```

F) **FLUTTER PROJECT STRUCTURE**:
   ```
   mobile/
   ‚îú‚îÄ‚îÄ lib/
   ‚îÇ   ‚îú‚îÄ‚îÄ main.dart
   ‚îÇ   ‚îú‚îÄ‚îÄ screens/
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ booking/
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ payment/
   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ profile/
   ‚îÇ   ‚îú‚îÄ‚îÄ services/
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api_service.dart
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ payment_service.dart
   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ notification_service.dart
   ‚îÇ   ‚îú‚îÄ‚îÄ models/
   ‚îÇ   ‚îî‚îÄ‚îÄ widgets/
   ‚îú‚îÄ‚îÄ android/
   ‚îú‚îÄ‚îÄ ios/
   ‚îî‚îÄ‚îÄ pubspec.yaml
   ```

G) **TECH STACK MOBILE**:
   - **Frontend**: Flutter (Dart)
   - **State Management**: Provider/Bloc
   - **HTTP Client**: Dio
   - **Local Storage**: SharedPreferences/Hive
   - **Push Notifications**: Firebase Cloud Messaging (FCM)
   - **QR Code**: qr_flutter + qr_code_scanner
   - **Payment SDK**: VNPay, MoMo, ZaloPay native SDKs

üöÄ **ROADMAP PH√ÅT TRI·ªÇN**:
   - **Phase 1**: Authentication & Hotel Search (Mobile UI)
   - **Phase 2**: Booking Flow & Online Payment Integration  
   - **Phase 3**: QR Code Payment & Offline Booking
   - **Phase 4**: Push Notifications & Real-time Updates
   - **Phase 5**: Advanced Features (Reviews, Loyalty, etc.)

üìã **NEXT STEPS**:
   1. Setup Flutter project v·ªõi architecture pattern
   2. Implement Authentication screens & API integration
   3. Design Hotel search & booking flow UI
   4. Integrate payment gateways (VNPay/MoMo/ZaloPay)
   5. Setup Firebase FCM cho push notifications
   6. Testing tr√™n iOS & Android devices
