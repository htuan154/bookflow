// src/api/v1/services/contract.service.js

const contractRepository = require('../repositories/contract.repository');
const hotelRepository = require('../repositories/hotel.repository');
const { AppError } = require('../../../utils/errors');
const Contract_custom = require('../../../models/contract_hotel');

class ContractService {
    // /**
    //  * Admin t·∫°o m·ªôt h·ª£p ƒë·ªìng m·ªõi cho m·ªôt kh√°ch s·∫°n.
    //  * @param {object} contractData - D·ªØ li·ªáu h·ª£p ƒë·ªìng.
    //  * @param {string} adminId - ID c·ªßa admin t·∫°o h·ª£p ƒë·ªìng.
    //  * @returns {Promise<Contract>}
    //  */
    // async createContract(contractData, adminId) {
    //     // Logic nghi·ªáp v·ª•: Ki·ªÉm tra kh√°ch s·∫°n v√† ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
    //     const hotel = await hotelRepository.findById(contractData.hotel_id);
    //     if (!hotel) {
    //         throw new AppError('Hotel not found', 404);
    //     }

    //     // Logic nghi·ªáp v·ª•: T·ª± ƒë·ªông t·∫°o m·ªôt s·ªë h·ª£p ƒë·ªìng duy nh·∫•t
    //     const contractNumber = `HD-${hotel.name.substring(0, 5).toUpperCase()}-${Date.now()}`;

    //     const fullContractData = {
    //         ...contractData,
    //         user_id: hotel.ownerId, // G√°n h·ª£p ƒë·ªìng cho ch·ªß kh√°ch s·∫°n
    //         contract_number: contractNumber,
    //         created_by: adminId,
    //         status: 'draft', // H·ª£p ƒë·ªìng m·ªõi lu√¥n ·ªü tr·∫°ng th√°i nh√°p
    //     };

    //     return await contractRepository.create(fullContractData);
    // }
// t·∫°o h·ª£p ƒë·ªìng ngay 23/8
    async createContract(contractData, userId) {
    // userId = ng∆∞·ªùi ƒëang ƒëƒÉng nh·∫≠p (l·∫•y t·ª´ JWT ho·∫∑c session)
    if (!userId) {
        throw new AppError('User ID is required', 400);
    }

    // Ki·ªÉm tra kh√°ch s·∫°n c√≥ t·ªìn t·∫°i kh√¥ng
    const hotel = await hotelRepository.findById(contractData.hotel_id);
    if (!hotel) {
        throw new AppError('Hotel not found', 404);
    }

    // Ki·ªÉm tra quy·ªÅn: ch·ªâ ch·ªß kh√°ch s·∫°n m·ªõi ƒë∆∞·ª£c t·∫°o h·ª£p ƒë·ªìng
    if (hotel.ownerId !== userId) {
        throw new AppError('Only hotel owner can create contract for this hotel', 403);
    }

    // Sinh s·ªë h·ª£p ƒë·ªìng t·ª± ƒë·ªông
    const contractNumber = `HD-${hotel.name.substring(0, 5).toUpperCase()}-${Date.now()}`;

    const fullContractData = {
        ...contractData,
        user_id: userId,                   // ch√≠nh l√† ch·ªß kh√°ch s·∫°n
        contract_number: contractNumber,
        created_by: userId,
        status: 'draft',
    };

    console.log('[Service] ‚úÖ fullContractData:', fullContractData);

    return await contractRepository.create(fullContractData);
}
    //C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng ng√† 24/8
    /**
     * Ch·ªß kh√°ch s·∫°n c·∫≠p nh·∫≠t h·ª£p ƒë·ªìng c·ªßa ch√≠nh m√¨nh.
     * @param {string} contractId - ID h·ª£p ƒë·ªìng c·∫ßn update
     * @param {object} updateData - D·ªØ li·ªáu m·ªõi
     * @param {string} userId - ID user ƒëang login
     * @returns {Promise<Contract>}
     */
    async updateContract(contractId, updateData, userId) {
        // 1. Ki·ªÉm tra h·ª£p ƒë·ªìng c√≥ t·ªìn t·∫°i kh√¥ng
        const contract = await contractRepository.findById(contractId);
        if (!contract) {
            throw new AppError('Contract not found', 404);
        }

        // 2. Ch·ªâ ch·ªß kh√°ch s·∫°n (user_id) m·ªõi ƒë∆∞·ª£c quy·ªÅn ch·ªânh s·ª≠a
        if (contract.userId !== userId) {
            throw new AppError('You are not allowed to update this contract', 403);
        }

        // 3. G·ªçi repo ƒë·ªÉ update
        const updatedContract = await contractRepository.update(contractId, updateData);

        return updatedContract;
    }

    /**
     * L·∫•y m·ªôt h·ª£p ƒë·ªìng b·∫±ng ID.
     * @param {string} contractId - ID c·ªßa h·ª£p ƒë·ªìng.
     * @returns {Promise<Contract>}
     */
    async getContractById(contractId) {
        const contract = await contractRepository.findById(contractId);
        if (!contract) {
            throw new AppError('Contract not found', 404);
        }
        return contract;
    }
// x√≥a h·ª£p ƒë·ªìng ng√†y 24/8
    async deleteContract(contractId, userId) {
        // 1. Ki·ªÉm tra h·ª£p ƒë·ªìng c√≥ t·ªìn t·∫°i
        const contract = await contractRepository.findById(contractId);
        if (!contract) {
            throw new AppError('Contract not found', 404);
        }

        // 2. Ki·ªÉm tra kh√°ch s·∫°n c·ªßa h·ª£p ƒë·ªìng
        const hotel = await hotelRepository.findById(contract.hotelId);
        if (!hotel) {
            throw new AppError('Hotel not found', 404);
        }

        // 3. Ch·ªâ ch·ªß kh√°ch s·∫°n m·ªõi ƒë∆∞·ª£c quy·ªÅn x√≥a
        if (hotel.ownerId !== userId) {
            throw new AppError('You are not allowed to delete this contract', 403);
        }

        // 4. G·ªçi repo ƒë·ªÉ x√≥a
        const deleted = await contractRepository.deleteById(contractId);
        if (!deleted) {
            throw new AppError('Failed to delete contract', 500);
        }

        return true;
    }

    /**
     * L·∫•y t·∫•t c·∫£ h·ª£p ƒë·ªìng c·ªßa m·ªôt kh√°ch s·∫°n.
     * @param {string} hotelId - ID c·ªßa kh√°ch s·∫°n.
     * @returns {Promise<Contract[]>}
     */
    async getContractsByHotel(hotelId) {
        return await contractRepository.findByHotelId(hotelId);
    }

    /**
     * Admin c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa m·ªôt h·ª£p ƒë·ªìng.
     * @param {string} contractId - ID c·ªßa h·ª£p ƒë·ªìng.
     * @param {object} updateData - D·ªØ li·ªáu c·∫≠p nh·∫≠t (status, signed_date, notes, etc.).
     * @returns {Promise<Contract>}
     */
    async updateContractStatus(contractId, updateData) {
        const contract = await contractRepository.findById(contractId);
        if (!contract) {
            throw new AppError('Contract not found', 404);
        }

        console.log('üì• [CONTRACT SERVICE] Update contract status:', { contractId, updateData });

        const { status, signed_date, adminId, notes, approved_by, approvedBy } = updateData;

        const validStatuses = ['pending', 'active', 'expired', 'terminated', 'cancelled'];
        if (!validStatuses.includes(status)) {
            throw new AppError('Invalid status for contract', 400);
        }

        const finalUpdateData = {
            status: status,
            approved_by: adminId || approved_by || approvedBy,
        };

        // X·ª≠ l√Ω signed_date: ∆∞u ti√™n t·ª´ request, n·∫øu kh√¥ng c√≥ th√¨ gi·ªØ nguy√™n
        if (signed_date) {
            finalUpdateData.signed_date = signed_date;
            console.log('‚úÖ [CONTRACT SERVICE] Setting signed_date:', signed_date);
        } else if (contract.signed_date || contract.signedDate) {
            finalUpdateData.signed_date = contract.signed_date || contract.signedDate;
            console.log('‚ÑπÔ∏è [CONTRACT SERVICE] Keeping existing signed_date:', finalUpdateData.signed_date);
        }

        // Th√™m notes n·∫øu c√≥
        if (notes) {
            finalUpdateData.notes = notes;
        }

        console.log('üì§ [CONTRACT SERVICE] Final update data:', finalUpdateData);

        return await contractRepository.update(contractId, finalUpdateData);
    }


    /**
     * L·∫•y danh s√°ch h·ª£p ƒë·ªìng theo tr·∫°ng th√°i (Admin).
     * @param {string} status - Tr·∫°ng th√°i h·ª£p ƒë·ªìng c·∫ßn l·ªçc.
     * @returns {Promise<Contract[]>}
     */
    async getContractsByStatus(status) {
        const validStatuses = ['draft', 'pending', 'active', 'expired', 'terminated', 'cancelled'];
        if (!validStatuses.includes(status)) {
            throw new AppError('Invalid status for contract list', 400);
        }

        return await contractRepository.findByStatus(status);
    }

    /**
     * L·∫•y t·∫•t c·∫£ h·ª£p ƒë·ªìng (Admin).
     * @returns {Promise<Contract_custom[]>}
     */
    async getAllContracts() {
        const contracts = await contractRepository.findAll();
        return contracts.map(c => c.toJSON());
    }

    //th√™m v√†o ng√†y 28/8 ƒë·ªÉ l·∫•y t·∫•t c·∫£ c√°c h·ªçp ƒë·ªìng thu·ªôc ch·ªß s·ªü h·ªØ ƒëang ƒëƒÉng nh·∫≠p
    /**
     * L·∫•y t·∫•t c·∫£ h·ª£p ƒë·ªìng c·ªßa m·ªôt ch·ªß kh√°ch s·∫°n c·ª• th·ªÉ.
     * @param {string} userId - ID c·ªßa ch·ªß kh√°ch s·∫°n
     * @returns {Promise<Contract[]>}
     */
    async getMyContracts(userId) {
        return await contractRepository.findByUserId(userId);
    }
   /**
 * Ch·ªß kh√°ch s·∫°n g·ª≠i duy·ªát h·ª£p ƒë·ªìng (chuy·ªÉn t·ª´ draft -> pending).
 * @param {string} contractId - ID h·ª£p ƒë·ªìng
 * @param {string} userId - ID ch·ªß kh√°ch s·∫°n (ng∆∞·ªùi g·ª≠i duy·ªát)
 * @returns {Promise<Contract>}
 */
async sendForApproval(contractId, userId) {
    // 1. Ki·ªÉm tra h·ª£p ƒë·ªìng c√≥ t·ªìn t·∫°i kh√¥ng
    const contract = await contractRepository.findById(contractId);
    if (!contract) {
        throw new AppError('Contract not found', 404);
    }

    // 2. H·ª£p ƒë·ªìng ph·∫£i c√≤n ·ªü tr·∫°ng th√°i draft th√¨ m·ªõi g·ª≠i duy·ªát ƒë∆∞·ª£c
    if (contract.status !== 'draft') {
        throw new AppError('Only draft contracts can be sent for approval', 400);
    }

    // 3. G·ªçi repo ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i (repo ƒë√£ check owner_id)
    const updatedContract = await contractRepository.sendForApproval(contractId, userId);

    if (!updatedContract) {
        throw new AppError('You are not allowed to send this contract for approval', 403);
    }

    return updatedContract;
}

}

module.exports = new ContractService();
