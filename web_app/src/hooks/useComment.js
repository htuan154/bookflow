// src/context/useComment.js
import { useContext } from 'react';
import { BlogCommentContext } from './BlogCommentContext';

/**
 * Custom hook ƒë·ªÉ s·ª≠ d·ª•ng Blog Comment Context
 * @returns {Object} Blog comment context value v·ªõi state v√† actions
 */
const useComment = () => {
    const context = useContext(BlogCommentContext);
    
    // Debug: Log hook usage
    console.log('ü™ù useComment hook called');
    
    // Ki·ªÉm tra xem hook c√≥ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong provider kh√¥ng
    if (!context) {
        console.error('‚ùå useComment must be used within BlogCommentProvider');
        throw new Error(
            'useComment must be used within a BlogCommentProvider. ' +
            'Wrap your component tree with <BlogCommentProvider>.'
        );
    }
    
    // Debug: Log available context properties
    console.log('üéØ useComment context keys:', Object.keys(context));
    console.log('üìä Current state summary:', {
        blogsCount: context.blogs?.length || 0,
        commentsCount: context.comments?.length || 0,
        currentBlog: context.currentBlog?.blog_id || null,
        loading: context.loading,
        hasError: !!context.error
    });
    
    // Destructure ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng
    const {
        // State
        blogs,
        currentBlog,
        comments,
        statistics,
        blogStats,
        publishedBlogsStats,
        loading,
        error,
        pagination,
        
        // Actions - Blog management
        getAllBlogs,
        getPublishedBlogsStats,
        getBlogById,
        getBlogsAdmin,
        getBlogDetailsAdmin,
        getBlogStatistics,
        getBlogStats,
        incrementBlogView,
        likeBlog,
        unlikeBlog,
        searchPublishedBlogs, // <-- th√™m d√≤ng n√†y
        
        // Actions - Comment management
        getBlogCommentsWithUser,
        getBlogComments,
        createComment,
        replyComment,
        deleteComment,
        updateCommentStatus,
        likeComment,
        getCommentLikeStatus,
        reportComment,
        
        // Utility actions
        clearError,
        setPagination
    } = context;
    
    // Helper functions v·ªõi debug
    const helpers = {
        /**
         * Ki·ªÉm tra xem c√≥ ƒëang loading kh√¥ng
         */
        isLoading: () => {
            const result = loading;
            console.log('‚è≥ isLoading:', result);
            return result;
        },
        
        /**
         * Ki·ªÉm tra xem c√≥ l·ªói kh√¥ng
         */
        hasError: () => {
            const result = !!error;
            console.log('üö® hasError:', result, error);
            return result;
        },
        
        /**
         * L·∫•y th√¥ng tin l·ªói
         */
        getErrorMessage: () => {
            const message = error || 'No error';
            console.log('üìù getErrorMessage:', message);
            return message;
        },
        
        /**
         * Ki·ªÉm tra xem c√≥ blog hi·ªán t·∫°i kh√¥ng
         */
        hasCurrentBlog: () => {
            const result = !!currentBlog;
            console.log('üìñ hasCurrentBlog:', result, currentBlog?.blog_id);
            return result;
        },
        
        /**
         * L·∫•y ID c·ªßa blog hi·ªán t·∫°i
         */
        getCurrentBlogId: () => {
            const blogId = currentBlog?.blog_id || null;
            console.log('üÜî getCurrentBlogId:', blogId);
            return blogId;
        },
        
        /**
         * Ki·ªÉm tra xem c√≥ comments kh√¥ng
         */
        hasComments: () => {
            const result = comments && comments.length > 0;
            console.log('üí¨ hasComments:', result, `(${comments?.length || 0} comments)`);
            return result;
        },
        
        /**
         * L·∫•y s·ªë l∆∞·ª£ng comments
         */
        getCommentsCount: () => {
            const count = comments?.length || 0;
            console.log('üî¢ getCommentsCount:', count);
            return count;
        },
        
        /**
         * L·∫•y s·ªë l∆∞·ª£ng blogs
         */
        getBlogsCount: () => {
            const count = blogs?.length || 0;
            console.log('üìö getBlogsCount:', count);
            return count;
        },
        
        /**
         * T√¨m comment theo ID
         */
        findCommentById: (commentId) => {
            console.log('üîç findCommentById:', commentId);
            const comment = comments?.find(c => c.comment_id === commentId) || null;
            console.log('üìù Found comment:', comment ? 'Yes' : 'No');
            return comment;
        },
        
        /**
         * T√¨m blog theo ID
         */
        findBlogById: (blogId) => {
            console.log('üîç findBlogById:', blogId);
            const blog = blogs?.find(b => b.blog_id === blogId) || null;
            console.log('üìñ Found blog:', blog ? 'Yes' : 'No');
            return blog;
        },
        
        /**
         * L·∫•y comments theo tr·∫°ng th√°i
         */
        getCommentsByStatus: (status) => {
            console.log('üîç getCommentsByStatus:', status);
            const filteredComments = comments?.filter(c => c.status === status) || [];
            console.log('üìù Found comments:', filteredComments.length);
            return filteredComments;
        },
        
        /**
         * L·∫•y pending comments (ch·ªù duy·ªát)
         */
        getPendingComments: () => {
            console.log('‚è≥ Getting pending comments');
            return helpers.getCommentsByStatus('pending');
        },
        
        /**
         * L·∫•y approved comments
         */
        getApprovedComments: () => {
            console.log('‚úÖ Getting approved comments');
            return helpers.getCommentsByStatus('approved');
        },
        
        /**
         * L·∫•y rejected comments
         */
        getRejectedComments: () => {
            console.log('‚ùå Getting rejected comments');
            return helpers.getCommentsByStatus('rejected');
        },
        
        /**
         * Reset to√†n b·ªô state v·ªÅ initial
         */
        resetState: () => {
            console.log('üîÑ Resetting state (Note: This would require additional reducer action)');
            // C√≥ th·ªÉ implement th√™m action RESET_STATE trong reducer n·∫øu c·∫ßn
        },
        
        /**
         * Refresh data - reload current blog v√† comments
         */
        refreshCurrentData: async () => {
            console.log('üîÑ Refreshing current data');
            try {
                if (currentBlog?.blog_id) {
                    console.log('üîÑ Refreshing blog and comments for:', currentBlog.blog_id);
                    await getBlogById(currentBlog.blog_id);
                    await getBlogCommentsWithUser(currentBlog.blog_id);
                }
            } catch (error) {
                console.error('üí• Error refreshing data:', error);
            }
        }
    };
    
    // Debug: Log helper functions
    console.log('üõ†Ô∏è useComment helpers available:', Object.keys(helpers));
    
    return {
        // State
        blogs,
        currentBlog,
        comments,
        statistics,
        blogStats,
        publishedBlogsStats,
        loading,
        error,
        pagination,
        
        // Actions - Blog management
        getAllBlogs,
        getPublishedBlogsStats,
        getBlogById,
        getBlogsAdmin,
        getBlogDetailsAdmin,
        getBlogStatistics,
        getBlogStats,
        incrementBlogView,
        likeBlog,
        unlikeBlog,
        searchPublishedBlogs,
        
        // Actions - Comment management
        getBlogCommentsWithUser,
        getBlogComments,
        createComment,
        replyComment,
        deleteComment,
        updateCommentStatus,
        likeComment,
        getCommentLikeStatus,
        reportComment,
        
        // Utility actions
        clearError,
        setPagination,
        
        // Helper functions
        ...helpers
    };
};

export default useComment;