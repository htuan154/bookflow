// src/hooks/useBookingDetail.js
import { useState, useCallback } from 'react';
import { bookingDetailApiService } from '../api/bookingDetail.service';
import { toast } from 'react-toastify';

export const useBookingDetail = () => {
  const [bookingDetails, setBookingDetails] = useState([]);
  const [fullBookingInfo, setFullBookingInfo] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  /**
   * L·∫•y chi ti·∫øt booking
   */
  const fetchBookingDetails = useCallback(async (bookingId) => {
    setLoading(true);
    setError(null);
    try {
      console.log('üîÑ [useBookingDetail] Fetching booking details:', bookingId);
      const response = await bookingDetailApiService.getBookingDetails(bookingId);
      const details = response?.data || [];
      setBookingDetails(details);
      console.log('‚úÖ [useBookingDetail] Booking details loaded:', details.length);
      return details;
    } catch (err) {
      console.error('‚ùå [useBookingDetail] Error fetching booking details:', err);
      setError(err.message || 'Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt booking');
      toast.error('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt booking');
      return [];
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß (booking + details)
   */
  const fetchFullBookingInfo = useCallback(async (bookingId) => {
    setLoading(true);
    setError(null);
    try {
      console.log('üîÑ [useBookingDetail] Fetching full booking info:', bookingId);
      const info = await bookingDetailApiService.getFullBookingInfo(bookingId);
      setFullBookingInfo(info);
      setBookingDetails(info.details || []);
      console.log('‚úÖ [useBookingDetail] Full booking info loaded');
      return info;
    } catch (err) {
      console.error('‚ùå [useBookingDetail] Error fetching full booking info:', err);
      setError(err.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin booking');
      toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin booking');
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * T·∫°o booking detail
   */
  const createBookingDetail = useCallback(async (detailData) => {
    setLoading(true);
    setError(null);
    try {
      console.log('üîÑ [useBookingDetail] Creating booking detail:', detailData);
      const response = await bookingDetailApiService.createBookingDetail(detailData);
      toast.success('T·∫°o chi ti·∫øt booking th√†nh c√¥ng');
      console.log('‚úÖ [useBookingDetail] Booking detail created');
      return response.data;
    } catch (err) {
      console.error('‚ùå [useBookingDetail] Error creating booking detail:', err);
      setError(err.message || 'Kh√¥ng th·ªÉ t·∫°o chi ti·∫øt booking');
      toast.error('Kh√¥ng th·ªÉ t·∫°o chi ti·∫øt booking');
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * C·∫≠p nh·∫≠t booking detail
   */
  const updateBookingDetail = useCallback(async (detailId, updateData) => {
    setLoading(true);
    setError(null);
    try {
      console.log('üîÑ [useBookingDetail] Updating booking detail:', detailId);
      const response = await bookingDetailApiService.updateBookingDetail(detailId, updateData);
      
      // C·∫≠p nh·∫≠t l·∫°i state
      setBookingDetails(prevDetails =>
        prevDetails.map(detail =>
          detail.detailId === detailId ? { ...detail, ...updateData } : detail
        )
      );
      
      toast.success('C·∫≠p nh·∫≠t chi ti·∫øt booking th√†nh c√¥ng');
      console.log('‚úÖ [useBookingDetail] Booking detail updated');
      return response.data;
    } catch (err) {
      console.error('‚ùå [useBookingDetail] Error updating booking detail:', err);
      setError(err.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t chi ti·∫øt booking');
      toast.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t chi ti·∫øt booking');
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * X√≥a booking detail
   */
  const deleteBookingDetail = useCallback(async (detailId) => {
    setLoading(true);
    setError(null);
    try {
      console.log('üîÑ [useBookingDetail] Deleting booking detail:', detailId);
      await bookingDetailApiService.deleteBookingDetail(detailId);
      
      // C·∫≠p nh·∫≠t l·∫°i state
      setBookingDetails(prevDetails =>
        prevDetails.filter(detail => detail.detailId !== detailId)
      );
      
      toast.success('X√≥a chi ti·∫øt booking th√†nh c√¥ng');
      console.log('‚úÖ [useBookingDetail] Booking detail deleted');
    } catch (err) {
      console.error('‚ùå [useBookingDetail] Error deleting booking detail:', err);
      setError(err.message || 'Kh√¥ng th·ªÉ x√≥a chi ti·∫øt booking');
      toast.error('Kh√¥ng th·ªÉ x√≥a chi ti·∫øt booking');
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    bookingDetails,
    fullBookingInfo,
    loading,
    error,
    fetchBookingDetails,
    fetchFullBookingInfo,
    createBookingDetail,
    updateBookingDetail,
    deleteBookingDetail
  };
};

export default useBookingDetail;
