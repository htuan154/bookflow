// src/pages/admin/BlogManagement/BlogManagementPage.js
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import BlogList from '../../../components/blog/BlogList';
import { 
    Search,
    Plus,
    XCircle
} from 'lucide-react';
import { useBlogContext } from '../../../context/BlogContext';
import useAuth from '../../../hooks/useAuth';

const BlogManagementPage = () => {
    // State nh·∫≠n th√¥ng tin ph√¢n trang t·ª´ BlogList
    const [blogListPagination, setBlogListPagination] = useState({ pagination: {}, loading: false, handlePageChange: () => {} });

    // ƒêƒÉng k√Ω callback nh·∫≠n th√¥ng tin ph√¢n trang t·ª´ BlogList
    useEffect(() => {
        window.onBlogListPaginationChange = (data) => {
            setBlogListPagination(data);
        };
        return () => {
            window.onBlogListPaginationChange = null;
        };
    }, []);
    const navigate = useNavigate();
    const {  isAuthenticated } = useAuth();
    const {
        blogs,
        pagination,
        error,
        statistics,
        fetchStatistics,
        clearError,
        deleteBlog,
        getBlogsByRoleAdmin,
        fetchBlogsByStatus,
        updateBlogStatus,
    } = useBlogContext();

    const [currentStatus, setCurrentStatus] = useState('all');
    const [deleteModal, setDeleteModal] = useState({ open: false, blog: null });
    const [deleteSuccess, setDeleteSuccess] = useState(false);
    const [searchTerm, setSearchTerm] = useState(''); // Th√™m state cho t·ª´ kh√≥a t√¨m ki·∫øm

    // Th√™m state ƒë·ªÉ l∆∞u sortBy v√† sortOrder
    const [sortBy, setSortBy] = useState('created_at');
    const [sortOrder, setSortOrder] = useState('desc');

    // ƒê·ªãnh nghƒ©a h√†m tr∆∞·ªõc c√°c hook
    const loadStatistics = async () => {
        try {
            // Truy·ªÅn keyword (searchTerm) v√†o fetchStatistics ƒë·ªÉ l·∫•y ƒë√∫ng s·ªë l∆∞·ª£ng theo b·ªô l·ªçc
            await fetchStatistics({ keyword: searchTerm });
        } catch (error) {
            console.error('Failed to load blog statistics:', error);
        }
    };

    // useEffect g·ªçi loadStatistics
    useEffect(() => {
        // X·ª≠ l√Ω ƒëi·ªÅu ki·ªán b√™n trong hook
        if (isAuthenticated) {
            loadStatistics();
        }
    }, [isAuthenticated]);

    // useEffect g·ªçi fetchBlogsByStatus/fetchBlogs
    useEffect(() => {
        // ƒê√£ truy·ªÅn keyword v√†o fetchBlogsByStatus v√† fetchBlogs
        if (isAuthenticated) {
            if (currentStatus !== 'all') {
                fetchBlogsByStatus(currentStatus, { keyword: searchTerm });
            } else {
                getBlogsByRoleAdmin({ role: 'admin', keyword: searchTerm });
            }
        }
    }, [isAuthenticated, currentStatus, searchTerm, fetchBlogsByStatus, getBlogsByRoleAdmin]);

    // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã message
    if (!isAuthenticated) {
        return (
            <div className="p-6">
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
                    <div className="text-center">
                        <h3 className="text-lg font-medium text-yellow-800 mb-2">
                            Y√™u c·∫ßu ƒëƒÉng nh·∫≠p
                        </h3>
                        <p className="text-yellow-700 mb-4">
                            B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p v·ªõi quy·ªÅn admin ƒë·ªÉ truy c·∫≠p trang n√†y.
                        </p>
                        <button
                            onClick={() => window.location.href = '/login'}
                            className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700"
                        >
                            ƒêƒÉng nh·∫≠p
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    const getStatusCounts = () => {
        if (!statistics) {
            return {
                all: 0,
                draft: 0,
                pending: 0,
                published: 0,
                archived: 0,
                rejected: 0
            };
        }
        
        return {
            all: statistics.total || 0,
            draft: statistics.draft || 0,
            pending: statistics.pending || 0,
            published: statistics.published || 0,
            archived: statistics.archived || 0,
            rejected: statistics.rejected || 0
        };
    };

    const statusCounts = getStatusCounts();

    // Handler khi click tab - ch·ªâ ƒë·ªïi currentStatus
    const handleStatusChange = (status) => {
        setCurrentStatus(status);
    };

    // Handler cho c√°c action t·ª´ BlogList
    const handleBlogAction = async (action, blog) => {
        console.log('üìã Blog action:', action);
        console.log('üìã Full blog object:', JSON.stringify(blog, null, 2));
        
        if (!blog) {
            console.error('‚ùå No blog object provided');
            alert('L·ªói: Kh√¥ng c√≥ th√¥ng tin b√†i vi·∫øt');
            return;
        }
        
        // Debug t·∫•t c·∫£ c√°c tr∆∞·ªùng c√≥ th·ªÉ ch·ª©a ID
        console.log('üìã ID fields debug:');
        Object.keys(blog).forEach(key => {
            if (key.toLowerCase().includes('id')) {
                console.log(`  - ${key}:`, blog[key], typeof blog[key]);
            }
        });
        
        // H√†m helper ƒë·ªÉ l·∫•y blog ID - ∆ØU TI√äN blogId theo model Blog
        const getBlogId = (blogObj) => {
            if (!blogObj) return null;

            // N·∫øu truy·ªÅn v√†o l√† string (blogId), tr·∫£ v·ªÅ lu√¥n
            if (typeof blogObj === 'string') {
                return blogObj;
            }

            // ∆Øu ti√™n blogId ƒë·∫ßu ti√™n (theo model Blog)
            const candidates = [
                blogObj.blogId,     // Model Blog tr·∫£ v·ªÅ (camelCase)
                blogObj.blog_id,    // Fallback t·ª´ database (snake_case)
                blogObj.id,         // Fallback chung
                blogObj._id         // Fallback MongoDB style
            ];

            for (const candidate of candidates) {
                if (candidate && typeof candidate === 'string' && candidate.length > 0) {
                    // Ki·ªÉm tra format UUID (36 k√Ω t·ª± v·ªõi d·∫•u g·∫°ch ngang)
                    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
                    if (uuidRegex.test(candidate)) {
                        console.log(`‚úÖ Found valid ID: ${candidate} (from blogId field)`);
                        return candidate;
                    }
                }
            }

            return null;
        };
        
        const blogId = getBlogId(blog);
        console.log('üìã Final extracted blogId:', blogId);
        
        if (!blogId) {
            console.error('‚ùå Could not extract valid blog_id from:', blog);
            alert('L·ªói: Kh√¥ng t√¨m th·∫•y blog_id h·ª£p l·ªá');
            return;
        }
        
        switch (action) {
            case 'create':
                navigate('/admin/blog-management/create');
                break;
            case 'edit':
                console.log('üîß Navigating to edit with blog_id:', blogId);
                navigate(`/admin/blog-management/edit/${blogId}`);
                break;
            case 'view':
                console.log('üîç Navigating to view with blog_id:', blogId);
                navigate(`/admin/blog-management/view/${blogId}`);
                break;
            case 'delete':
                setDeleteModal({ open: true, blog });
                break;
            case 'changeStatus':
                // blog.newStatus l√† tr·∫°ng th√°i m·ªõi
                try {
                    await updateBlogStatus(blog.blogId || blog.id, blog.newStatus);
                    await getBlogsByRoleAdmin({ role: 'admin', keyword: searchTerm });
                    await fetchStatistics();
                } catch (err) {
                    alert('C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i: ' + (err?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'));
                }
                break;
            default:
                console.log('‚ùì Unknown action:', action);
        }
    };

    // X√°c nh·∫≠n x√≥a
    const handleConfirmDelete = async () => {
        const blog = deleteModal.blog;
        const blogId = blog?.blogId || blog?.blog_id || blog?.id || blog?.ID;
        try {
            await deleteBlog(blogId);
            await getBlogsByRoleAdmin({ role: 'admin', keyword: searchTerm });
            setDeleteModal({ open: false, blog: null });
            setDeleteSuccess(true);
            setTimeout(() => setDeleteSuccess(false), 2000);
        } catch (err) {
            alert('X√≥a b√†i vi·∫øt th·∫•t b·∫°i: ' + (err?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'));
        }
    };

    // H·ªßy x√≥a
    const handleCancelDelete = () => {
        setDeleteModal({ open: false, blog: null });
    };

    if (error) {
        return (
            <div className="p-6">
                <div className="bg-red-50 border border-red-200 rounded-lg p-6">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                            <XCircle className="h-6 w-6 text-red-600" />
                            <div>
                                <h3 className="text-lg font-medium text-red-800">
                                    C√≥ l·ªói x·∫£y ra
                                </h3>
                                <p className="text-red-700 mt-1">{error}</p>
                            </div>
                        </div>
                        <button
                            onClick={() => {
                                clearError();
                                loadStatistics();
                            }}
                            className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
                        >
                            Th·ª≠ l·∫°i
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    return (
    <div className="space-y-6 w-full max-w-6xl mx-auto">
            
            {/* Th√¥ng b√°o x√≥a th√†nh c√¥ng d·∫°ng modal gi·ªëng x√°c nh·∫≠n x√≥a */}
            {deleteSuccess && (
                <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-30">
                    <div className="bg-white rounded-lg shadow-lg p-6 max-w-xs w-full text-center border border-green-200">
                        <p className="mb-6 text-orange-800 font-medium">X√≥a b√†i vi·∫øt th√†nh c√¥ng!</p>
                        <div className="flex justify-center">
                            <button
                                onClick={() => setDeleteSuccess(false)}
                                className="px-4 py-2 bg-orange-600 text-white rounded hover:bg-orange-700"
                            >
                                ƒê√≥ng
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Header */}
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <div>
                    <h1 className="text-2xl font-bold text-gray-900">
                        Qu·∫£n l√Ω b√†i vi·∫øt
                    </h1>
                    <p className="text-gray-600 mt-1">
                        Qu·∫£n l√Ω t·∫•t c·∫£ b√†i vi·∫øt du l·ªãch v√† ƒë√°nh gi√° kh√°ch s·∫°n
                    </p>
                </div>
                
                
            </div>

           

            {/* Blog List */}
            <div className="bg-white rounded-lg shadow-sm border">
                <div className="p-6">
                    <BlogList
                        adminView={true}
                        statusFilter={currentStatus}
                        showActions={true}
                        selectable={true}
                        onBlogSelect={handleBlogAction}
                        sortBy={sortBy}
                        sortOrder={sortOrder}
                        searchTerm={searchTerm}
                        gridLayout={true}
                        // Th√™m c√°c props cho Status Filter
                        currentStatus={currentStatus}
                        onStatusChange={handleStatusChange}
                        statusCounts={getStatusCounts()}
                    />
                </div>
                {/* Ph√¢n trang ngo√†i BlogList - theo m·∫´u */}
                <div className="flex justify-between items-center mt-8 bg-white p-4 rounded-lg shadow border">
                    {/* Th√¥ng tin hi·ªÉn th·ªã b√™n tr√°i - s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø */}
                    <div className="flex items-center space-x-4">
                        <span className="text-sm text-gray-600">
                            {(() => {
                                const currentPage = pagination.currentPage || 1;
                                const itemsPerPage = 9;
                                const totalItems = pagination.totalItems || blogs?.length || 0;
                                const startItem = totalItems > 0 ? ((currentPage - 1) * itemsPerPage) + 1 : 0;
                                const endItem = Math.min(currentPage * itemsPerPage, totalItems);
                                
                                return `Hi·ªÉn th·ªã ${startItem}-${endItem} trong t·ªïng s·ªë ${totalItems} b√†i vi·∫øt`;
                            })()}
                        </span>
                        <div className="flex items-center space-x-2">
                            <span className="text-sm text-gray-600">Hi·ªÉn th·ªã:</span>
                            <select 
                                value={9}
                                onChange={(e) => {
                                    // Logic thay ƒë·ªïi items per page n·∫øu c·∫ßn
                                    console.log('Change items per page to:', e.target.value);
                                }}
                                className="border border-gray-300 rounded px-2 py-1 text-sm"
                            >
                                <option value={9}>9 m·ª•c</option>
                                <option value={18}>18 m·ª•c</option>
                                <option value={27}>27 m·ª•c</option>
                            </select>
                        </div>
                    </div>
                    
                    {/* Navigation b√™n ph·∫£i */}
                    <div className="flex items-center space-x-2">
                        {/* N√∫t v·ªÅ ƒë·∫ßu */}
                        <button
                            onClick={() => blogListPagination.handlePageChange(1)}
                            disabled={(pagination.currentPage || 1) === 1 || blogListPagination.loading}
                            className="px-2 py-1 border border-gray-300 rounded text-gray-700 hover:bg-gray-50 disabled:opacity-50 text-sm"
                            title="Trang ƒë·∫ßu"
                        >
                            &laquo;&laquo;
                        </button>
                        {/* N√∫t v·ªÅ tr∆∞·ªõc */}
                        <button
                            onClick={() => blogListPagination.handlePageChange((pagination.currentPage || 1) - 1)}
                            disabled={(pagination.currentPage || 1) === 1 || blogListPagination.loading}
                            className="px-3 py-1 border border-gray-300 rounded text-gray-700 hover:bg-gray-50 disabled:opacity-50 text-sm"
                            title="Trang tr∆∞·ªõc"
                        >
                            Tr∆∞·ªõc
                        </button>
                            {/* S·ªë trang hi·ªán t·∫°i */}
                            <button
                                className="px-3 py-1 bg-orange-600 text-white border border-blue-600 rounded text-sm font-medium"
                                disabled
                            >
                                {pagination.currentPage || 1}
                            </button>
                            
                            {/* N√∫t v·ªÅ sau */}
                            <button
                                onClick={() => blogListPagination.handlePageChange((pagination.currentPage || 1) + 1)}
                                disabled={(pagination.currentPage || 1) === (pagination.totalPages || 1) || blogListPagination.loading}
                                className="px-3 py-1 border border-gray-300 rounded text-gray-700 hover:bg-gray-50 disabled:opacity-50 text-sm"
                                title="Trang sau"
                            >
                                Ti·∫øp
                            </button>
                            {/* N√∫t v·ªÅ cu·ªëi */}
                            <button
                                onClick={() => blogListPagination.handlePageChange(pagination.totalPages || 1)}
                                disabled={(pagination.currentPage || 1) === (pagination.totalPages || 1) || blogListPagination.loading}
                                className="px-2 py-1 border border-gray-300 rounded text-gray-700 hover:bg-gray-50 disabled:opacity-50 text-sm"
                                title="Trang cu·ªëi"
                            >
                                &raquo;&raquo;
                            </button>
                            
                            {/* Input nh·∫£y trang */}
                            <div className="flex items-center space-x-1 ml-2">
                                <span className="text-sm text-gray-600">ƒê·∫øn trang:</span>
                                <input
                                    type="number"
                                    min={1}
                                    max={pagination.totalPages || 1}
                                    defaultValue={pagination.currentPage || 1}
                                    onKeyDown={e => {
                                        if (e.key === 'Enter') {
                                            const val = Number(e.target.value);
                                            const maxPage = pagination.totalPages || 1;
                                            if (val >= 1 && val <= maxPage) {
                                                blogListPagination.handlePageChange(val);
                                            }
                                        }
                                    }}
                                    className="w-12 px-1 py-1 border border-gray-300 rounded text-center text-sm focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                                />
                            </div>
                        </div>
                    </div>

            </div>
            {/* Delete Confirmation Modal */}
            {deleteModal.open && (
                <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-30">
                    <div className="bg-white rounded-lg shadow-lg p-6 max-w-xs w-full text-center">
                        <h2 className="text-lg font-semibold mb-4 text-orange-700">X√°c nh·∫≠n x√≥a</h2>
                        <p className="mb-6 text-gray-700">
                            B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√†i vi·∫øt <b>{deleteModal.blog?.title || 'n√†y'}</b>?
                        </p>
                        <div className="flex justify-center gap-4">
                            <button
                                onClick={handleCancelDelete}
                                className="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
                            >
                                H·ªßy
                            </button>
                            <button
                                onClick={handleConfirmDelete}
                                className="px-4 py-2 bg-orange-600 text-white rounded hover:bg-orange-700"
                            >
                                X√≥a
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default BlogManagementPage;