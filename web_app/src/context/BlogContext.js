    // src/context/BlogContext.js
import React, { createContext, useContext, useState, useCallback, useEffect, useMemo } from 'react';
import blogService from '../api/blog.service';

// Create context
const BlogContext = createContext();

// Custom hook to use blog context
export const useBlogContext = () => {
    const context = useContext(BlogContext);
    if (!context) {
        throw new Error('useBlogContext must be used within a BlogProvider');
    }
    return context;
};

// Blog Provider Component
export const BlogProvider = ({ children }) => {
    const [blogs, setBlogs] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [statistics, setStatistics] = useState(null);
    const [pagination, setPagination] = useState({
        currentPage: 1,
        itemsPerPage: 9, // ƒê·∫∑t 9 m·ª•c m·ªói trang cho blog
        totalItems: 0,
        totalPages: 1
    });
    const [currentBlog, setCurrentBlog] = useState(null);

    // H√†m l·∫•y t·∫•t c·∫£ blog c·ªßa admin

    // H√†m l·∫•y t·∫•t c·∫£ blog c·ªßa admin
    const getAllBlogsAdmin = useCallback(async (options = {}) => {
        try {
            setLoading(true);
            setError(null);
            const params = {
                page: options.page || pagination.currentPage,
                limit: options.limit || pagination.itemsPerPage,
                ...options
            };
            const response = await blogService.getAllBlogsAdmin(params);
            if (response?.success) {
                const blogsData = Array.isArray(response.data) ? response.data : response.data?.blogs || [];
                const paginationData = response.pagination || response.data?.pagination || {};
                setBlogs(blogsData);
                setPagination(prev => ({ ...prev, ...paginationData, currentPage: params.page }));
                return { blogs: blogsData, pagination: paginationData };
            } else {
                throw new Error(response?.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch b√†i vi·∫øt admin');
            }
        } catch (err) {
            setError(err.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i vi·∫øt admin');
            setBlogs([]);
            throw err;
        } finally {
            setLoading(false);
        }
    }, [pagination.currentPage, pagination.itemsPerPage]);

    // Clear error after 5 seconds
    useEffect(() => {
        if (error) {
            const timer = setTimeout(() => {
                setError(null);
            }, 5000);
            return () => clearTimeout(timer);
        }
    }, [error]);

    /**
     * Fetch blog statistics for admin only
     */
    const fetchStatistics = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('üîÑ Fetching admin blog statistics...');
            // L·∫•y t·∫•t c·∫£ blog c·ªßa admin ƒë·ªÉ t√≠nh th·ªëng k√™
            const response = await blogService.getBlogsByRoleAdmin({ 
                role: 'admin',
                limit: 1000 // L·∫•y nhi·ªÅu ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ƒë·ªß d·ªØ li·ªáu t√≠nh th·ªëng k√™
            });

            if (response.success) {
                const blogs = Array.isArray(response.data) ? response.data : response.data?.blogs || [];
                
                // T√≠nh s·ªë l∆∞·ª£ng theo t·ª´ng tr·∫°ng th√°i
                const statistics = {
                    total: blogs.length,
                    draft: blogs.filter(blog => blog.status === 'draft').length,
                    pending: blogs.filter(blog => blog.status === 'pending').length,
                    published: blogs.filter(blog => blog.status === 'published').length,
                    archived: blogs.filter(blog => blog.status === 'archived').length,
                    rejected: blogs.filter(blog => blog.status === 'rejected').length
                };
                
                setStatistics(statistics);
                console.log('‚úÖ Admin blog statistics loaded successfully:', statistics);
            } else {
                throw new Error(response.message || 'Failed to fetch admin blog statistics');
            }

        } catch (err) {
            console.error('‚ùå Error fetching admin blog statistics:', err);
            setError(err.message || 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ b√†i vi·∫øt admin');
            setStatistics(null);
        } finally {
            setLoading(false);
        }
    }, []);

    /**
     * Fetch blogs with current filters and pagination
     */
    const fetchBlogs = useCallback(async (options = {}) => {
        try {
            setLoading(true);
            setError(null);

            const params = {
                page: options.page || pagination.currentPage,
                limit: options.limit || pagination.itemsPerPage,
                ...options
            };

            console.log('üîÑ Fetching blogs with params:', params);

            let response;

            // N·∫øu adminView=true, ch·ªâ l·∫•y blog c·ªßa admin
            if (options.adminView) {
                // S·ª≠ d·ª•ng getBlogsByRoleAdmin ƒë·ªÉ ch·ªâ l·∫•y blog c·ªßa admin
                response = await blogService.getBlogsByRoleAdmin({ 
                    ...params, 
                    role: 'admin' 
                });
            } else {
                response = await blogService.getPublishedBlogs(params);
            }

            if (response?.success) {
                const blogsData = Array.isArray(response.data) ? response.data : response.data?.blogs || [];
                const paginationData = response.pagination || response.data?.pagination || {};
                console.log('üîç Raw blogs data from API:', blogsData);
                if (blogsData.length > 0) {
                    console.log('üîç First blog structure:', blogsData[0]);
                    console.log('üîç First blog keys:', Object.keys(blogsData[0]));
                }
                setBlogs(blogsData);
                setPagination(prev => ({
                    ...prev,
                    ...paginationData,
                    currentPage: params.page
                }));
                console.log('‚úÖ Blogs loaded successfully:', {
                    count: blogsData.length,
                    pagination: paginationData
                });
            } else if (
                response?.message &&
                (
                    response.message.toLowerCase() === 'success' ||
                    response.message.toLowerCase().includes('deleted successfully')
                )
            ) {
                // N·∫øu message l√† "Success" ho·∫∑c "Deleted successfully" th√¨ coi nh∆∞ th√†nh c√¥ng, kh√¥ng n√©m l·ªói
                // C√≥ th·ªÉ gi·ªØ nguy√™n data c≈© ho·∫∑c reload l·∫°i n·∫øu c·∫ßn
                return;
            } else {
                throw new Error(response?.message || 'Failed to fetch blogs');
            }

        } catch (err) {
            console.error('‚ùå Error fetching blogs:', err);
            setError(err.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i vi·∫øt');
            setBlogs([]);
        } finally {
            setLoading(false);
        }
    }, [pagination.currentPage, pagination.itemsPerPage]); // ‚ö†Ô∏è C√≥ th·ªÉ c·∫ßn review dependencies n√†y

    /**
     * Fetch blogs by specific status (admin only)
     */
    const fetchBlogsByStatus = useCallback(async (status, options = {}) => {
        try {
            setLoading(true);
            setError(null);

            if (!status) {
                throw new Error('Status is required');
            }

            const params = {
                page: options.page || 1,
                limit: options.limit || 10,
                keyword: options.keyword || '', 
                sortBy: options.sortBy || 'created_at',
                sortOrder: options.sortOrder || 'desc',
                role: 'admin', // Ch·ªâ l·∫•y blog c·ªßa admin
                status: status // Th√™m status v√†o params
            };

            console.log('üîÑ Fetching admin blogs by status:', status, params);

            // S·ª≠ d·ª•ng getBlogsByRoleAdmin thay v√¨ getBlogsByStatusAdmin ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ l·∫•y blog c·ªßa admin
            const response = await blogService.getBlogsByRoleAdmin(params);

            if (response?.success) {
                const blogsData = Array.isArray(response.data) ? response.data : response.data?.blogs || [];
                const paginationData = response.pagination || response.data?.pagination || {};
                setBlogs(blogsData);
                setPagination(prev => ({
                    ...prev,
                    ...paginationData,
                    currentPage: params.page
                }));
                console.log('‚úÖ Admin blogs by status loaded successfully:', {
                    status,
                    count: blogsData.length,
                    pagination: paginationData
                });
            } else {
                throw new Error(response?.message || 'Failed to fetch blogs by status');
            }

        } catch (err) {
            console.error('‚ùå Error fetching blogs by status:', err);
            setError(err.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i vi·∫øt');
            setBlogs([]);
        } finally {
            setLoading(false);
        }
    }, []);

    /**
     * Create a new blog (CREATE)
     */
    const createBlog = useCallback(async (blogData) => {
        try {
            setLoading(true);
            setError(null);

            if (!blogData) {
                throw new Error('Blog data is required');
            }

            console.log('üîÑ Creating blog via context:', blogData);
            
            if (!blogData.title?.trim()) {
                throw new Error('Ti√™u ƒë·ªÅ b√†i vi·∫øt l√† b·∫Øt bu·ªôc');
            }
            
            if (!blogData.content?.trim()) {
                throw new Error('N·ªôi dung b√†i vi·∫øt l√† b·∫Øt bu·ªôc');
            }

            if (!blogData.author_id) {
                throw new Error('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c t√°c gi·∫£. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            }

            const response = await blogService.createBlog(blogData);
            
            console.log('üì• Raw response from blog service:', response);

            if (response && response.success === true) {
                const newBlog = response.data;
                
                setBlogs(prev => {
                    if (prev.length === 0 || prev[0].status === newBlog.status) {
                        return [newBlog, ...prev];
                    }
                    return prev;
                });
                
                if (statistics) {
                    setStatistics(prev => ({
                        ...prev,
                        total: (prev.total || 0) + 1,
                        [newBlog.status]: (prev[newBlog.status] || 0) + 1
                    }));
                }
                
                console.log('‚úÖ Blog created successfully in context:', newBlog);
                return newBlog;
                
            } else if (response && response.message && response.message.includes('successfully')) {
                console.log('üéØ Success message detected, treating as success');
                
                const newBlog = response.data || {
                    blog_id: Date.now(),
                    title: blogData.title,
                    status: blogData.status || 'draft',
                    created_at: new Date().toISOString()
                };
                
                setBlogs(prev => [newBlog, ...prev]);
                console.log('‚úÖ Blog created successfully (special case):', newBlog);
                return newBlog;
                
            } else {
                console.error('‚ùå Blog creation failed:', response);
                throw new Error(response?.message || 'T·∫°o b√†i vi·∫øt th·∫•t b·∫°i');
            }

        } catch (err) {
            console.error('‚ùå Error in createBlog context:', err);
            
            if (err.message && err.message.includes('successfully')) {
                console.log('üéØ Success message in error, treating as success');
                return { success: true, message: err.message };
            }
            
            const errorMessage = err.message || 'Kh√¥ng th·ªÉ t·∫°o b√†i vi·∫øt';
            setError(errorMessage);
            throw new Error(errorMessage);
        } finally {
            setLoading(false);
        }
    }, [statistics]);

    /**
     * Update a blog (UPDATE)
     */
    const updateBlog = useCallback(async (blogId, blogData) => {
        try {
            setLoading(true);
            setError(null);

            if (!blogId) {
                throw new Error('Blog ID is required');
            }
            
            if (!blogData) {
                throw new Error('Blog data is required');
            }

            // Ch·ªâ forward c√°c tr∆∞·ªùng h·ª£p h·ª£p l·ªá cho backend
            const allowedFields = [
                'title',
                'slug',
                'content',
                'excerpt',
                'status',
                'tags',
                'hotel_id',
                'featured_image_url',
                'meta_description'
            ];
            const filteredBlogData = {};
            for (const key of allowedFields) {
                if (blogData[key] !== undefined) {
                    filteredBlogData[key] = blogData[key];
                }
            }

            console.log('üîÑ Updating blog via context:', blogId, filteredBlogData);
            
            const response = await blogService.updateBlog(blogId, filteredBlogData);

            // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p backend tr·∫£ v·ªÅ message th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ success:true
            if (response?.success) {
                const updatedBlog = response.data;
                setBlogs(prevBlogs => 
                    prevBlogs.map(blog => 
                        // S·ª≠a: d√πng blog.blogId thay v√¨ blog.blog_id
                        blog.blogId === blogId
                            ? { ...blog, ...updatedBlog } 
                            : blog
                    )
                );
                console.log('‚úÖ Blog updated successfully:', updatedBlog);
                return updatedBlog;
            } else if (
                response &&
                typeof response === 'object' &&
                response.message &&
                response.message.toLowerCase().includes('successfully')
            ) {
                // X·ª≠ l√Ω th√†nh c√¥ng ƒë·∫∑c bi·ªát
                console.log('üéØ Success message detected, treating as success');
                return response.data || {};
            } else {
                throw new Error(response?.message || 'C·∫≠p nh·∫≠t b√†i vi·∫øt th·∫•t b·∫°i');
            }

        } catch (err) {
            console.error('‚ùå Error updating blog:', err);
            const errorMessage = err.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b√†i vi·∫øt';
            setError(errorMessage);
            throw new Error(errorMessage);
        } finally {
            setLoading(false);
        }
    }, []);

    /**
     * Delete a blog (DELETE)
     */
    const deleteBlog = useCallback(async (blogId) => {
        try {
            setLoading(true);
            setError(null);

            if (!blogId) {
                throw new Error('Blog ID is required');
            }

            console.log('üîÑ Deleting blog via context:', blogId);
            
            const response = await blogService.deleteBlog(blogId);

            // Ch·ªâ x√≥a kh·ªèi UI n·∫øu ch·∫Øc ch·∫Øn th√†nh c√¥ng
            if (response?.success === true) {
                setBlogs(prevBlogs => 
                    prevBlogs.filter(blog => 
                        // S·ª≠a: d√πng blog.blogId thay v√¨ blog.blog_id
                        blog.blogId !== blogId
                    )
                );
                if (statistics) {
                    setStatistics(prev => ({
                        ...prev,
                        total: Math.max(0, (prev.total || 0) - 1)
                    }));
                }
                console.log('‚úÖ Blog deleted successfully');
                return true;
            } else if (
                response &&
                typeof response === 'object' &&
                response.message &&
                response.message.toLowerCase().includes('deleted successfully')
            ) {
                setBlogs(prevBlogs => 
                    prevBlogs.filter(blog => 
                        // S·ª≠a: d√πng blog.blogId thay v√¨ blog.blog_id
                        blog.blogId !== blogId
                    )
                );
                if (statistics) {
                    setStatistics(prev => ({
                        ...prev,
                        total: Math.max(0, (prev.total || 0) - 1)
                    }));
                }
                console.log('‚úÖ Blog deleted successfully (special case)');
                return true;
            } else {
                // Kh√¥ng x√≥a kh·ªèi UI n·∫øu API tr·∫£ v·ªÅ l·ªói ho·∫∑c response kh√¥ng h·ª£p l·ªá
                console.error('‚ùå Delete failed, API response:', response);
                throw new Error(response?.message || 'X√≥a b√†i vi·∫øt th·∫•t b·∫°i');
            }

        } catch (err) {
            console.error('‚ùå Error deleting blog:', err);
            const errorMessage = err.message || 'Kh√¥ng th·ªÉ x√≥a b√†i vi·∫øt';
            setError(errorMessage);
            throw new Error(errorMessage);
        } finally {
            setLoading(false);
        }
    }, [statistics]);

    /**
     * Get blog by ID (READ) - QUAN TR·ªåNG: Th√™m cache ƒë·ªÉ tr√°nh g·ªçi l·∫°i
     */
    const getBlogById = useCallback(async (blogId) => {
        try {
            setLoading(true);
            setError(null);

            if (!blogId) {
                throw new Error('Blog ID is required');
            }

            console.log('üîÑ Fetching blog by ID via context:', blogId);

            // ‚úÖ LO·∫†I B·ªé cache logic ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n l·∫•y d·ªØ li·ªáu m·ªõi
            const response = await blogService.getBlogById(blogId);

            if (response && response.status === 'success' && response.data) {
                console.log('‚úÖ Blog data from API:', response.data);
                return response.data;
            }

            if (
                response &&
                typeof response === 'object' &&
                (response.blogId || response.blog_id || response.title)
            ) {
                return response;
            }

            if (response?.success === true) {
                const blogData = response.data;
                if (blogData && typeof blogData === 'object') {
                    return blogData;
                } else {
                    throw new Error('D·ªØ li·ªáu b√†i vi·∫øt kh√¥ng h·ª£p l·ªá');
                }
            } else if (response?.success === false) {
                throw new Error(response?.message || 'API tr·∫£ v·ªÅ l·ªói');
            } else {
                throw new Error('Ph·∫£n h·ªìi t·ª´ server kh√¥ng r√µ r√†ng');
            }

        } catch (err) {
            console.error('‚ùå Error fetching blog:', err);
            
            let errorMessage = 'Kh√¥ng th·ªÉ t·∫£i b√†i vi·∫øt';
            
            if (err.message?.includes('404')) {
                errorMessage = 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt v·ªõi ID n√†y';
                setError(errorMessage);
                return null;
            } else if (err.message?.includes('401')) {
                errorMessage = 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem b√†i vi·∫øt';
            } else if (err.message?.includes('403')) {
                errorMessage = 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem b√†i vi·∫øt n√†y';
            } else if (err.message?.includes('successfully')) {
                console.log('üéØ Success message in error, treating as success');
                return { success: true, message: err.message };
            } else if (err.message) {
                errorMessage = err.message;
            }
            
            setError(errorMessage);
            throw new Error(errorMessage);
        } finally {
            setLoading(false);
        }
    }, []); // ‚úÖ Kh√¥ng dependency n√†o ƒë·ªÉ tr√°nh v√≤ng l·∫∑p

    /**
     * Update blog status
     */
    const updateBlogStatus = useCallback(async (blogId, status) => {
        try {
            setLoading(true);
            setError(null);

            if (!blogId) {
                throw new Error('Blog ID is required');
            }
            
            if (!status) {
                throw new Error('Status is required');
            }

            console.log('üîÑ Updating blog status via context:', blogId, status);
            
            const response = await blogService.updateBlogStatus(blogId, status);

            if (response?.success) {
                const updatedBlog = response.data;
                
                setBlogs(prevBlogs => 
                    prevBlogs.map(blog => 
                        // S·ª≠a: d√πng blog.blogId thay v√¨ blog.blog_id
                        blog.blogId === blogId
                            ? { ...blog, status, ...updatedBlog } 
                            : blog
                    )
                );
                
                console.log('‚úÖ Blog status updated successfully');
                return updatedBlog;
            } else if (
                response &&
                typeof response === 'object' &&
                response.message &&
                response.message.toLowerCase().includes('successfully')
            ) {
                // X·ª≠ l√Ω th√†nh c√¥ng ƒë·∫∑c bi·ªát (message th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ success:true)
                console.log('üéØ Success message detected, treating as success');
                return response.data || {};
            } else {
                throw new Error(response?.message || 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i');
            }

        } catch (err) {
            console.error('‚ùå Error updating blog status:', err);
            const errorMessage = err.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i vi·∫øt';
            setError(errorMessage);
            throw new Error(errorMessage);
        } finally {
            setLoading(false);
        }
    }, []);

    /**
     * Refresh current blog list
     */
    const refreshBlogs = useCallback(async () => {
        console.log('üîÑ Refreshing blogs...');
        await fetchBlogs({ page: pagination.currentPage });
    }, [fetchBlogs, pagination.currentPage]);

    /**
     * Clear error manually
     */
    const clearError = useCallback(() => {
        setError(null);
    }, []);

    /**
     * Update pagination
     */
    const updatePagination = useCallback((newPagination) => {
        setPagination(prev => ({ ...prev, ...newPagination }));
    }, []);

    /**
     * Clear current blog
     */
    const clearCurrentBlog = useCallback(() => {
        setCurrentBlog(null);
    }, []);

    // Th√™m h√†m getOwnerBlogs ƒë·ªÉ l·∫•y blog c·ªßa hotel owner
    const getOwnerBlogs = useCallback(async (options = {}) => {
        try {
            setLoading(true);
            setError(null);

            const params = {
                page: options.page || 1,
                limit: options.limit || 10,
                status: options.status,
                sortBy: options.sortBy || 'created_at',
                sortOrder: options.sortOrder || 'desc'
            };

            console.log('üîÑ Fetching owner blogs with params:', params);
            const response = await blogService.getOwnerBlogs(params);

            if (response?.success) {
                const blogsData = Array.isArray(response.data) ? response.data : response.data?.blogs || [];
                const paginationData = response.pagination || response.data?.pagination || {};
                console.log('‚úÖ Owner blogs loaded successfully:', blogsData);
                setBlogs(blogsData);
                setPagination(prev => ({
                    ...prev,
                    ...paginationData,
                    currentPage: params.page
                }));
                return { blogs: blogsData, pagination: paginationData };
            } else {
                throw new Error(response?.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch b√†i vi·∫øt');
            }
        } catch (err) {
            console.error('‚ùå Error fetching owner blogs:', err);
            setError(err.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i vi·∫øt c·ªßa b·∫°n');
            setBlogs([]);
            throw err;
        } finally {
            setLoading(false);
        }
    }, []);

    // Th√™m h√†m searchBlogsByTitle v√†o BlogProvider
    const searchBlogsByTitle = useCallback(async (keyword, options = {}) => {
        try {
            setLoading(true);
            setError(null);

            const params = {
                keyword,
                page: options.page || 1,
                limit: options.limit || 10
            };

            const response = await blogService.searchBlogsByTitle(params);

            if (response?.success) {
                const blogsData = Array.isArray(response.data) ? response.data : response.data?.blogs || [];
                const paginationData = response.pagination || response.data?.pagination || {};
                setBlogs(blogsData);
                setPagination(prev => ({
                    ...prev,
                    ...paginationData,
                    currentPage: params.page
                }));
            } else {
                throw new Error(response?.message || 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ph√π h·ª£p');
            }
        } catch (err) {
            setError(err.message || 'Kh√¥ng th·ªÉ t√¨m ki·∫øm b√†i vi·∫øt');
            setBlogs([]);
        } finally {
            setLoading(false);
        }
    }, []);

    /**
     * Fetch blogs by admin role (l·ªçc theo role, ph√¢n trang, tr·∫°ng th√°i)
     */
    const fetchBlogsByRole = useCallback(async (options = {}) => {
        try {
            setLoading(true);
            setError(null);

            const params = {
                page: options.page || 1,
                limit: options.limit || 10,
                role: options.role,
                status: options.status,
                sortBy: options.sortBy || 'created_at',
                sortOrder: options.sortOrder || 'desc'
            };

            const response = await blogService.getBlogsByRoleAdmin(params);

            if (response?.success) {
                const blogsData = Array.isArray(response.data) ? response.data : response.data?.blogs || [];
                const paginationData = response.pagination || response.data?.pagination || {};
                setBlogs(blogsData);
                setPagination(prev => ({
                    ...prev,
                    ...paginationData,
                    currentPage: params.page
                }));
            } else {
                throw new Error(response?.message || 'Failed to fetch blogs by role');
            }
        } catch (err) {
            setError(err.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i vi·∫øt');
            setBlogs([]);
        } finally {
            setLoading(false);
        }
    }, []);

    // L·∫•y blog theo authorId (admin)
    const getBlogsByAuthorId = useCallback(async (authorId, options = {}) => {
        try {
            setLoading(true);
            setError(null);
            const params = {
                page: options.page || 1,
                limit: options.limit || 10,
                status: options.status,
                keyword: options.keyword || '',
                sortBy: options.sortBy || 'created_at',
                sortOrder: options.sortOrder || 'desc'
            };
            const response = await blogService.getBlogsByAuthorId(authorId, params);
            if (response?.success) {
                const blogsData = Array.isArray(response.data) ? response.data : response.data?.blogs || [];
                const paginationData = response.pagination || response.data?.pagination || {};
                setBlogs(blogsData);
                setPagination(prev => ({
                    ...prev,
                    ...paginationData,
                    currentPage: params.page
                }));
                return { blogs: blogsData, pagination: paginationData };
            } else {
                throw new Error(response?.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch b√†i vi·∫øt');
            }
        } catch (err) {
            setError(err.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i vi·∫øt c·ªßa admin');
            setBlogs([]);
            throw err;
        } finally {
            setLoading(false);
        }
    }, []);
    // ‚úÖ QUAN TR·ªåNG: Memoize context value ƒë·ªÉ tr√°nh re-render v√¥ t·∫≠n
    const value = useMemo(() => ({
        // States
        blogs,
        loading,
        error,
        statistics,
        pagination,
        currentBlog,

        // Actions
    fetchBlogs,
    fetchBlogsByStatus,
    fetchStatistics,
    createBlog,
    updateBlog,
    deleteBlog,
    getBlogById,
    updateBlogStatus,
    refreshBlogs,
    updatePagination,
    clearError,
    setCurrentBlog,
    clearCurrentBlog,
    getOwnerBlogs,
    getAllBlogsAdmin,

    // Th√™m h√†m t√¨m ki·∫øm blog theo ti√™u ƒë·ªÅ (kh√¥ng d·∫•u)
    searchBlogsByTitle,
    // Th√™m h√†m l·∫•y blog theo role admin
    fetchBlogsByRole,
    getBlogsByRoleAdmin: fetchBlogsByRole,
    }), [
        // ‚úÖ QUAN TR·ªåNG: Dependencies ch√≠nh x√°c
        blogs,
        loading,
        error,
        statistics,
        pagination,
        currentBlog,
    fetchBlogs,
    fetchBlogsByStatus,
    fetchStatistics,
    createBlog,
    updateBlog,
    deleteBlog,
    getBlogById,
    updateBlogStatus,
    refreshBlogs,
    updatePagination,
    clearError,
    setCurrentBlog,
    clearCurrentBlog,
    getOwnerBlogs,
    getAllBlogsAdmin,
    searchBlogsByTitle,
    fetchBlogsByRole,
    ]);

    return (
        <BlogContext.Provider value={value}>
            {children}
        </BlogContext.Provider>
    );
};

export default BlogContext;